/* *************************
    *** USER SIGNUP ***
************************** */
//This function will fetch information from our user/create endpoint on the server (http://localhost:3000/user/create) and handle that information by chaining promises together.
function userSignUp() {
 //console.log('userSignUp Function Called')
    let userEmail = document.getElementById('emailSignup').value;
    let userPass = document.getElementById('pwdSignup').value;
    let newUserData = { user: { email: userEmail, password: userPass } }; //setting up another variable containing a user object using the previous two variables.
    console.log(`NEWUSERDATA ==> ${newUserData.user.email} ${newUserData.user.password}`); // logging email and password entered into sign up fields)

    fetch('http://localhost:3000/user/create', { //fetching from the user create endpoint created in the server
        method: 'POST', //route in the server handles a POST request so our method is a POST. THESE TWO MUST MATCH
        //If a route takes a POST request, then the declared method in the request should be POST. 
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newUserData) //newUserData is turned into a JSON string.

    })
    .then(response => response.json()) //parses response into JSON
    .then((response) => {
        console.log(response.sessionToken); //logging sessionToken
        let token = response.sessionToken; //creating variable token to store session token
        localStorage.setItem('SessionToken', token); //accessing the localStorage for the current domain we are using and -
        //using the setItem method to set the SessionToken in local storage to be the token generated by our server.
        tokenChecker() //calling the tokenChecker function
    })
    .catch((err) => {
        console.log(err);
    })
}


/* *************************
    *** USER LOGIN ***
************************** */
function userLogin() {
//  console.log('userLogin Function Called')
    let userEmail = document.getElementById('emailLogin').value;
    let userPass = document.getElementById('pwdLogin').value;
    console.log(userEmail, userPass);

    let userData = { user: { email: userEmail, password: userPass } };
    console.log(`USERDATA ==> ${userData.user.email} ${userData.user.password}`);

    fetch('http://localhost:3000/user/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData)

    })
    .then(response => response.json())
    .then((response) => {
        console.log(response.sessionToken);
        let token = response.sessionToken;
        localStorage.setItem('SessionToken', token);
        tokenChecker()
    })
    .catch((err) => {
        console.log(err);
    })
}


/* *************************
    *** USER LOGOUT ***
************************** */
function userLogout() {
    localStorage.setItem('SessionToken', undefined) //utilizing same setItem method within local storage that is used when -
    //a user signs up/logs in; however, this sessionToken is set to undefined. After this function runs when 'logout' is -
    //clicked, the user will no longer have a token meaning they cannot access protected routes
    console.log(`sessionToken ==> ${localStorage.sessionToken}`)
    tokenChecker()
}


/* *************************
*** TOKEN CHECKER FUNCTION ***
************************** */
//This function does not reach out to any end points on the server; however, it does give a little bit of extra user feedback for whether they are logged in or not.

function tokenChecker() {
//  console.log('tokenChecker Function Called')

    let display = document.getElementById('journals')
    let header = document.createElement('h5')
    let accessToken = localStorage.getItem('SessionToken')
    let text = 'Login or signup to get started!'

    for (i=0; i = display.childNodes.length; i++) { //removes child nodes with 'journals' div (so the message -
        //doesn't get appended to the end of a bunch of journal cards)
        display.removeChild(display.firstChild)
    }

    if (accessToken === 'undefined') { //using conditional to check whether or not there is a token
        display.appendChild(header); //if NO TOKEN, this adds a header with the message in the 'text' variable
        header.textContent = text //see line directly above - this message is added if there is no token
        header.setAttribute('id', 'defaultLogin');
    } else (
        null
    )
}
tokenChecker() //calling tokenChecker function. We want to call it right away so as soon as the browser goes to the Journal webpage it checks if there is a token in local storage or not and displays the message accordingly.